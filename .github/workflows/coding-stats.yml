name: Update Multi-Repo Coding Stats

on:
  schedule:
    - cron: '0 0 * * *' # Daily at midnight
  workflow_dispatch: # Manual trigger

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SECRET_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install requests
        run: pip install requests

      - name: Create multi-repo stats generator
        run: |
          cat > multi_repo_stats.py << 'EOF'
          import requests
          import re
          import os
          from datetime import datetime, timedelta
          from collections import defaultdict

          def get_all_repos():
              """Get all repos user has access to (excluding certain orgs)"""
              token = os.getenv('SECRET_PAT')
              headers = {'Authorization': f'token {token}'}
              
              # Organizations to ignore (case insensitive)
              ignored_orgs = ['itmo-wad', 'citizncompany', 'brandsmith-worldwide']
              
              repos = []
              page = 1
              
              while True:
                  # Get both owned and accessible repos
                  url = f'https://api.github.com/user/repos?per_page=100&page={page}&type=all'
                  response = requests.get(url, headers=headers)
                  
                  if response.status_code != 200:
                      print(f"Error fetching repos: {response.status_code}")
                      break
                  
                  page_repos = response.json()
                  if not page_repos:
                      break
                  
                  # Filter out ignored organizations
                  for repo in page_repos:
                      repo_owner = repo['owner']['login'].lower()  # Make case insensitive
                      repo_full_name = repo['full_name']
                      
                      print(f"🔍 Found repo: {repo_full_name} (owner: {repo['owner']['login']})")
                      
                      if repo_owner not in [org.lower() for org in ignored_orgs]:
                          repos.append(repo)
                          print(f"✅ Including {repo_full_name}")
                      else:
                          print(f"❌ IGNORING {repo_full_name} (blocked org: {repo['owner']['login']})")
                      
                  page += 1
                  
                  # Limit to prevent rate limiting
                  if len(repos) > 500:
                      break
              
              print(f"\n📊 Final count: {len(repos)} repos after filtering")
              return repos

          def get_recent_commits(repo_full_name):
              """Get recent commits from a repo by the authenticated user"""
              token = os.getenv('SECRET_PAT')
              headers = {'Authorization': f'token {token}'}
              
              # Get commits from last 7 days
              since = (datetime.now() - timedelta(days=7)).isoformat()
              url = f'https://api.github.com/repos/{repo_full_name}/commits'
              params = {
                  'since': since,
                  'per_page': 100
              }
              
              try:
                  response = requests.get(url, headers=headers, params=params)
                  if response.status_code == 200:
                      all_commits = response.json()
                      
                      # Get authenticated user info to filter commits
                      user_response = requests.get('https://api.github.com/user', headers=headers)
                      if user_response.status_code == 200:
                          username = user_response.json()['login']
                          # Filter to only commits by this user
                          user_commits = []
                          for commit in all_commits:
                              commit_author = commit.get('author', {})
                              if commit_author and commit_author.get('login') == username:
                                  user_commits.append(commit)
                          return user_commits
                      else:
                          # Fallback: return all commits if can't get user info
                          return all_commits
                          
              except Exception as e:
                  print(f"Error fetching commits for {repo_full_name}: {e}")
              
              return []

          def get_commit_files(repo_full_name, commit_sha):
              """Get files changed in a commit"""
              token = os.getenv('SECRET_PAT')
              headers = {'Authorization': f'token {token}'}
              
              try:
                  url = f'https://api.github.com/repos/{repo_full_name}/commits/{commit_sha}'
                  response = requests.get(url, headers=headers)
                  if response.status_code == 200:
                      commit_data = response.json()
                      return commit_data.get('files', [])
              except Exception as e:
                  print(f"Error fetching commit files: {e}")
              
              return []

          def detect_language(filename):
              """Detect language from file extension"""
              ext_map = {
                  '.py': 'Python', '.js': 'JavaScript', '.ts': 'TypeScript',
                  '.java': 'Java', '.cpp': 'C++', '.c': 'C', '.go': 'Go',
                  '.rs': 'Rust', '.php': 'PHP', '.rb': 'Ruby', '.swift': 'Swift',
                  '.kt': 'Kotlin', '.cs': 'C#', '.html': 'HTML', '.css': 'CSS',
                  '.vue': 'Vue', '.jsx': 'React', '.tsx': 'TypeScript React',
                  '.scss': 'SCSS', '.sql': 'SQL', '.sh': 'Bash',
                  '.yml': 'YAML', '.yaml': 'YAML', '.json': 'JSON',
                  '.md': 'Markdown', '.xml': 'XML', '.dart': 'Dart',
                  '.r': 'R', '.scala': 'Scala', '.clj': 'Clojure'
              }
              
              ext = os.path.splitext(filename)[1].lower()
              return ext_map.get(ext, 'Other')

          def create_bar(percentage, length=20):
              """Create progress bar"""
              filled = int(length * percentage / 100)
              return f"{'█' * filled}{'░' * (length - filled)} {percentage:.1f}%"

          def get_language_icon(lang):
              """Get emoji for language"""
              icons = {
                  'Python': '🐍', 'JavaScript': '🟨', 'TypeScript': '🔷',
                  'Java': '☕', 'C++': '⚡', 'C': '🔧', 'Go': '🐹',
                  'Rust': '🦀', 'PHP': '🐘', 'Ruby': '💎', 'Swift': '🍎',
                  'HTML': '🌐', 'CSS': '🎨', 'React': '⚛️', 'Vue': '💚',
                  'TypeScript React': '⚛️', 'SCSS': '🎨', 'SQL': '🗃️',
                  'Bash': '💻', 'JSON': '📄', 'Markdown': '📖',
                  'YAML': '📝', 'Kotlin': '🎯', 'C#': '💜'
              }
              return icons.get(lang, '📝')

          def generate_stats():
              """Generate coding stats from all repos"""
              print("🔍 Fetching your repositories...")
              repos = get_all_repos()
              
              if not repos:
                  return "No repositories found! 🤔"
              
              print(f"📊 Found {len(repos)} repositories. Analyzing commits...")
              
              lang_stats = defaultdict(lambda: {'commits': 0, 'additions': 0, 'deletions': 0, 'files': set()})
              total_commits = 0
              repo_count = 0
              
              # Get the authenticated user's login
              token = os.getenv('SECRET_PAT')
              headers = {'Authorization': f'token {token}'}
              user_response = requests.get('https://api.github.com/user', headers=headers)
              if user_response.status_code == 200:
                  username = user_response.json()['login']
                  print(f"👤 Tracking commits for user: {username}")
              else:
                  username = os.getenv('GITHUB_ACTOR', 'sponge-bobs-square-pants')
                  print(f"👤 Using fallback username: {username}")
              
              for repo in repos:
                  repo_name = repo['full_name']
                  print(f"📂 Checking {repo_name}...")
                  
                  commits = get_recent_commits(repo_name)
                  if not commits:
                      continue
                  
                  repo_count += 1
                  repo_commits = 0
                  
                  for commit in commits[:20]:  # Check more commits but limit to avoid rate limits
                      # Double check this is actually the user's commit
                      commit_author = commit.get('author', {})
                      if commit_author and commit_author.get('login') == username:
                          repo_commits += 1
                          total_commits += 1
                          
                          files = get_commit_files(repo_name, commit['sha'])
                          
                          for file_info in files:
                              filename = file_info['filename']
                              lang = detect_language(filename)
                              
                              # Only count this commit once per language (not per file)
                              lang_stats[lang]['files'].add(filename)
                              lang_stats[lang]['additions'] += file_info.get('additions', 0)
                              lang_stats[lang]['deletions'] += file_info.get('deletions', 0)
                  
                  # Add commit count per language based on files touched
                  for commit in commits[:20]:
                      commit_author = commit.get('author', {})
                      if commit_author and commit_author.get('login') == username:
                          files = get_commit_files(repo_name, commit['sha'])
                          commit_languages = set()
                          
                          for file_info in files:
                              filename = file_info['filename']
                              lang = detect_language(filename)
                              commit_languages.add(lang)
                          
                          # Count this commit for each unique language in the commit
                          for lang in commit_languages:
                              lang_stats[lang]['commits'] += 1
                  
                  if repo_commits > 0:
                      print(f"  ✅ Found {repo_commits} commits by {username}")
                  else:
                      print(f"  ❌ No commits by {username}")
              
              if not lang_stats:
                  return "No recent coding activity found across your repositories! 🚀"
              
              # Sort by total changes (additions + deletions)
              sorted_langs = sorted(
                  lang_stats.items(),
                  key=lambda x: x[1]['additions'] + x[1]['deletions'],
                  reverse=True
              )
              
              total_changes = sum(
                  stats['additions'] + stats['deletions'] 
                  for stats in lang_stats.values()
              )
              
              chart = "## 📊 This Week's Multi-Repo Coding Breakdown\n\n"
              chart += "```text\n"
              
              for lang, stats in sorted_langs[:10]:  # Top 10 languages
                  changes = stats['additions'] + stats['deletions']
                  percentage = (changes / total_changes * 100) if total_changes > 0 else 0
                  icon = get_language_icon(lang)
                  bar = create_bar(percentage)
                  
                  file_count = len(stats['files'])
                  commit_count = stats['commits']
                  
                  chart += f"{icon} {lang:<12} {commit_count:>3} commits  {file_count:>3} files  {changes:>4} changes  {bar}\n"
              
              chart += "```\n\n"
              chart += f"📈 **{total_commits} commits** across **{repo_count} repositories** • "
              chart += f"📝 **{total_changes} lines** changed • "
              chart += f"🗓️ **Last 7 days**\n\n"
              chart += f"*Updated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}*\n"
              
              return chart

          def update_readme():
              """Update README with new stats"""
              chart = generate_stats()
              
              try:
                  with open('README.md', 'r') as f:
                      content = f.read()
              except:
                  content = ""
              
              start = "<!--START_SECTION:coding-->"
              end = "<!--END_SECTION:coding-->"
              
              if start in content and end in content:
                  pattern = f"{re.escape(start)}.*?{re.escape(end)}"
                  new_content = re.sub(
                      pattern,
                      f"{start}\n{chart}\n{end}",
                      content,
                      flags=re.DOTALL
                  )
              else:
                  new_content = content + f"\n\n{start}\n{chart}\n{end}\n"
              
              with open('README.md', 'w') as f:
                  f.write(new_content)
              
              print("✅ README updated with multi-repo coding stats!")

          if __name__ == "__main__":
              update_readme()
          EOF

      - name: Generate multi-repo stats
        env:
          SECRET_PAT: ${{ secrets.SECRET_PAT }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: python multi_repo_stats.py

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Multi-Repo Stats Bot"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📊 Update multi-repo coding activity stats"
            git push
          fi
